path_data = paste(path_dir, "/data/activos", sep = "")
Files_names = list.files(path_data)
Asset = floor(runif(1, 1, length(Files_names)))
Prices = read.csv(paste(path_data, "/", Files_names[Asset], sep = ""))[,-c(6,7)]
Ticker = strsplit(colnames(Prices)[2], "[.]")[[1]][1]
colnames(Prices) <- c("Date", "Open", "High", "Low", "Close")
p = 20
MA_prices = MA(Prices, p)
# To Store the crossings
Cross_ts <- c()
Cross_ts[1:(p-1)] <- rep(NA, p-1)
# Initialize the first point
Cross_ts[p] = 0
# Fill the other points
for(i in (p+1):nrow(MA_prices)){
if(MA_prices$Close[i - 1] < MA_prices[i - 1, 6] &&
MA_prices$Close[i] > MA_prices[i, 6]){
Cross_ts[i] = 1
}else if(MA_prices$Close[i - 1] > MA_prices[i - 1, 6] &&
MA_prices$Close[i] < MA_prices[i, 6]){
Cross_ts[i] = -1
}else{
Cross_ts[i] = 0
}
}
MA_prices$Crosses <- Cross_ts
View(MA_prices)
which(MA_prices$Crosses==1)
which(MA_prices$Crosses==-1)
length(which(MA_prices$Crosses==1))
length(which(MA_prices$Crosses==-11))
length(which(MA_prices$Crosses==-1))
length(which(MA_prices$Crosses==-1))
length(which(MA_prices$Crosses==1))
path_data = paste(path_dir, "/data/activos", sep = "")
Files_names = list.files(path_data)
Asset = floor(runif(1, 1, length(Files_names)))
Prices = read.csv(paste(path_data, "/", Files_names[Asset], sep = ""))[,-c(6,7)]
Ticker = strsplit(colnames(Prices)[2], "[.]")[[1]][1]
colnames(Prices) <- c("Date", "Open", "High", "Low", "Close")
p = 20
MA_prices = MA(Prices, p)
# To Store the crossings
Cross_ts <- c()
Cross_ts[1:(p-1)] <- rep(NA, p-1)
# Initialize the first point
Cross_ts[p] = 0
# Fill the other points
for(i in (p+1):nrow(MA_prices)){
if(MA_prices$Close[i - 1] < MA_prices[i - 1, 6] &&
MA_prices$Close[i] > MA_prices[i, 6]){
Cross_ts[i] = 1
}else if(MA_prices$Close[i - 1] > MA_prices[i - 1, 6] &&
MA_prices$Close[i] < MA_prices[i, 6]){
Cross_ts[i] = -1
}else{
Cross_ts[i] = 0
}
}
MA_prices$Crosses <- Cross_ts
Strat_Date <- c()
Buy_Price <- c()
Sell_Price <- c()
Strat_return <- c()
length(which(MA_prices$Crosses==1))
length(which(MA_prices$Crosses==-1))
ind_up <- which(MA_prices$Crosses == 1)
ind_down <- which(MA_prices$Crosses == -1)
View(data.frame(ind_up, ind_down))
View(MA_prices)
max(length(ind_up), length(ind_down))
path_data = paste(path_dir, "/data/activos", sep = "")
Files_names = list.files(path_data)
Asset = floor(runif(1, 1, length(Files_names)))
Prices = read.csv(paste(path_data, "/", Files_names[Asset], sep = ""))[,-c(6,7)]
Ticker = strsplit(colnames(Prices)[2], "[.]")[[1]][1]
colnames(Prices) <- c("Date", "Open", "High", "Low", "Close")
p = 20
MA_prices = MA(Prices, p)
# To Store the crossings
Cross_ts <- c()
Cross_ts[1:(p-1)] <- rep(NA, p-1)
# Initialize the first point
Cross_ts[p] = 0
# Fill the other points
for(i in (p+1):nrow(MA_prices)){
if(MA_prices$Close[i - 1] < MA_prices[i - 1, 6] &&
MA_prices$Close[i] > MA_prices[i, 6]){
Cross_ts[i] = 1
}else if(MA_prices$Close[i - 1] > MA_prices[i - 1, 6] &&
MA_prices$Close[i] < MA_prices[i, 6]){
Cross_ts[i] = -1
}else{
Cross_ts[i] = 0
}
}
MA_prices$Crosses <- Cross_ts
# 1) Get the indeces for 1 et -1
ind_up <- which(MA_prices$Crosses == 1)
ind_down <- which(MA_prices$Crosses == -1)
# 2) Define the variables to store the Data
Buy_Date <- c()
Buy_Price <- c()
Sell_Date <- c()
Sell_Price <- c()
Strat_return <- c()
max(length(ind_up), length(ind_down))
for(i in 1:(max(length(ind_up), length(ind_down)))){
Buy_Date[i] = MA_prices$Date[ind_up[i]]
Buy_Price[i] = MA_prices$Close[ind_up[i]]
Sell_Date[i] = MA_prices$Date[ind_down[i]]
Sell_Price[i] = MA_prices$Close[ind_down[i]]
Strat_return[i] = (Buy_Price[i]/Sell_Price[i] - 1) * 100
}
Strat_summary = data.frame("Buy Date" : Buy_Date, "Sell Date" : Sell_Date,
"Buy Price" : Buy_Price, "Sell Price": Sell_Price,
"Return" : Strat_return)
path_data = paste(path_dir, "/data/activos", sep = "")
Files_names = list.files(path_data)
Asset = floor(runif(1, 1, length(Files_names)))
Prices = read.csv(paste(path_data, "/", Files_names[Asset], sep = ""))[,-c(6,7)]
Ticker = strsplit(colnames(Prices)[2], "[.]")[[1]][1]
colnames(Prices) <- c("Date", "Open", "High", "Low", "Close")
p = 20
MA_prices = MA(Prices, p)
# To Store the crossings
Cross_ts <- c()
Cross_ts[1:(p-1)] <- rep(NA, p-1)
# Initialize the first point
Cross_ts[p] = 0
# Fill the other points
for(i in (p+1):nrow(MA_prices)){
if(MA_prices$Close[i - 1] < MA_prices[i - 1, 6] &&
MA_prices$Close[i] > MA_prices[i, 6]){
Cross_ts[i] = 1
}else if(MA_prices$Close[i - 1] > MA_prices[i - 1, 6] &&
MA_prices$Close[i] < MA_prices[i, 6]){
Cross_ts[i] = -1
}else{
Cross_ts[i] = 0
}
}
MA_prices$Crosses <- Cross_ts
# 1) Get the indeces for 1 et -1
ind_up <- which(MA_prices$Crosses == 1)
ind_down <- which(MA_prices$Crosses == -1)
# 2) Define the variables to store the Data
Buy_Date <- c()
Buy_Price <- c()
Sell_Date <- c()
Sell_Price <- c()
Strat_return <- c()
for(i in 1:(max(length(ind_up), length(ind_down)))){
Buy_Date[i] = MA_prices$Date[ind_up[i]]
Buy_Price[i] = MA_prices$Close[ind_up[i]]
Sell_Date[i] = MA_prices$Date[ind_down[i]]
Sell_Price[i] = MA_prices$Close[ind_down[i]]
Strat_return[i] = (Buy_Price[i]/Sell_Price[i] - 1) * 100
}
Strat_summary = data.frame("Buy Date" : Buy_Date, "Sell Date" : Sell_Date,
"Buy Price" : Buy_Price, "Sell Price": Sell_Price,
"Return" : Strat_return)
# 2) Define the variables to store the Data
Buy_Date <- c()
Buy_Price <- c()
Sell_Date <- c()
Sell_Price <- c()
Strat_return <- c()
for(i in 1:(min(length(ind_up), length(ind_down)))){
Buy_Date[i] = MA_prices$Date[ind_up[i]]
Buy_Price[i] = MA_prices$Close[ind_up[i]]
Sell_Date[i] = MA_prices$Date[ind_down[i]]
Sell_Price[i] = MA_prices$Close[ind_down[i]]
Strat_return[i] = (Buy_Price[i]/Sell_Price[i] - 1) * 100
}
Strat_summary = data.frame("Buy Date" : Buy_Date, "Sell Date" : Sell_Date,
"Buy Price" : Buy_Price, "Sell Price": Sell_Price,
"Return" : Strat_return)
data.frame(Buy_Date, Sell_Date, Buy_Price, Sell_Price)
Viez(data.frame(Buy_Date, Sell_Date, Buy_Price, Sell_Price))
View(data.frame(Buy_Date, Sell_Date, Buy_Price, Sell_Price))
Strat_return
View(data.frame(Buy_Date, Sell_Date, Buy_Price, Sell_Price, Strat_return))
24.0115/24.35658 - 1
for(i in 1:(min(length(ind_up), length(ind_down)))){
Buy_Date[i] = MA_prices$Date[ind_up[i]]
Buy_Price[i] = MA_prices$Close[ind_up[i]]
Sell_Date[i] = MA_prices$Date[ind_down[i]]
Sell_Price[i] = MA_prices$Close[ind_down[i]]
Strat_return[i] = (Sell_Price[i]/Buy_Price[i] - 1) * 100
}
View(data.frame(Buy_Date, Sell_Date, Buy_Price, Sell_Price, Strat_return))
29.76995/29.98562 -1
Strat_summary = as.data.frame("Buy Date" : Buy_Date, "Sell Date" : Sell_Date,
"Buy Price" : Buy_Price, "Sell Price": Sell_Price,
"Return" : Strat_return)
Strat_summary = data.frame(Buy_Date, Sell_Date, Buy_Price, Sell_Price, Strat_return)
View(Strat_summary)
# Results Analysis
table(Strat_summary$Strat_return)
# Results Analysis
summary(Strat_summary$Strat_return)
hist(Strat_summary$Strat_return)
hist(Strat_summary$Strat_return, xlab = "Returns")
hist(Strat_summary$Strat_return, main = Ticker, xlab = "Returns")
Stats_strategy
# Results Analysis
Stats_strategy = summary(Strat_summary$Strat_return)
Stats_strategy
which(Strat_summary$Strat_return >= 0)
# Results Analysis
batt_avg = length(which(Strat_summary$Strat_return >= 0))/length(ind_up)
Strat_summary = data.frame(Buy_Date, Sell_Date, Buy_Price,
Sell_Price, Strat_return)
colnames(Strat_summary) <- c("Buy Date", "Sell Date", "Buy Price",
"Sell Price", "Returns in %")
# Results Analysis
batt_avg = length(which(Strat_summary$Strat_return >= 0))/length(ind_up) * 100
summary(Strat_summary$`Returns in %`)[1]
c(summary(Strat_summary$`Returns in %`), batt_avg)
c(summary(Strat_summary$`Returns in %`), "Batting Avergae" : batt_avg)
c(summary(Strat_summary$`Returns in %`),batt_avg)
data.frame(summary(Strat_summary$`Returns in %`),batt_avg)
as.data.frame(summary(Strat_summary$`Returns in %`),batt_avg)
Stats_strategy = summary(Strat_summary$`Returns in %`)
typeof(Stats_strategy)
Stats_strategy[1]
Stats_strategy[[1]]
colnames(Stats_strategy)
colnames(Stats_strategy)
Stats_strategy[1,]
Stats_strategy[,1]
Stats_strategy[1]
Stats_strategy[2]
split(Stats_strategy)
split.data.frame(Stats_strategy)
as.factor(Stats_strategy)
data.frame(Stats_strategy)
as.array(Stats_strategy)
data.frame(as.array(Stats_strategy))
Stats_strategy = data.frame(as.array(summary(Strat_summary$`Returns in %`)))
View(Stats_strategy)
Stats_strategy = data.frame(as.array(summary(Strat_summary$`Returns in %`)),
c("Batting avg %", batt_avg))
View(Stats_strategy)
Stats_strategy = data.frame(rbind(as.array(summary(Strat_summary$`Returns in %`)),
c("Batting avg %", batt_avg)))
View(Stats_strategy)
# Results Analysis
batt_avg = length(which(Strat_summary$`Returns in %` >= 0))/length(ind_up) * 100
Stats_strategy = data.frame(c(as.array(summary(Strat_summary$`Returns in %`)),
c("Batting avg %", batt_avg)))
View(Stats_strategy)
Stats_strategy = data.frame(c(as.array(summary(Strat_summary$`Returns in %`)),
batt_avg))
View(Stats_strategy)
Stats_strategy = data.frame(c(as.array(summary(Strat_summary$`Returns in %`)),
"Batting avg %" :batt_avg))
colnames(Stats_strategy) <- ""
View(Stats_strategy)
row.names(Stats_strategy)[7] <- "Batting avg %"
View(Stats_strategy)
Strat_summary = data.frame(Buy_Date, Sell_Date, Buy_Price,
Sell_Price, Strat_return)
colnames(Strat_summary) <- c("Buy Date", "Sell Date", "Buy Price",
"Sell Price", "Returns in %")
# Results Analysis
batt_avg = length(which(Strat_summary$`Returns in %` >= 0))/length(ind_up) * 100
Stats_strategy = data.frame(c(as.array(summary(Strat_summary$`Returns in %`)),
round(batt_avg, 2)))
colnames(Stats_strategy) <- ""
row.names(Stats_strategy)[7] <- "Batting avg %"
hist(Strat_summary$`Returns in %`, main = Ticker, xlab = "Returns in %")
View(Stats_strategy)
# Results Analysis
batt_avg = length(which(Strat_summary$`Returns in %` >= 0))/length(ind_up) * 100
# Results Analysis
batt_avg = round(length(which(Strat_summary$`Returns in %` >= 0))
/length(ind_up) * 100,2)
Stats_strategy = data.frame(c(as.array(summary(Strat_summary$`Returns in %`)),
batt_avg))
colnames(Stats_strategy) <- ""
row.names(Stats_strategy)[7] <- "Batting avg %"
hist(Strat_summary$`Returns in %`, main = Ticker, xlab = "Returns in %")
View(Stats_strategy)
# Results Analysis
batt_avg = round(length(which(Strat_summary$`Returns in %` >= 0))
/length(ind_up) * 100,2)
Stats_strategy = data.frame(c(as.array(summary(Strat_summary$`Returns in %`)),
batt_avg))
colnames(Stats_strategy) <- ""
row.names(Stats_strategy)[7] <- "Batting avg %"
hist(Strat_summary$`Returns in %`, main = Ticker, xlab = "Returns in %")
View(Stats_strategy)
colnames(Strat_summary) <- c("Buy Date", "Sell Date", "Buy Price",
"Sell Price", "Returns in %")
# Results Analysis
batt_avg = round(length(which(Strat_summary$`Returns in %` >= 0))
/length(ind_up) * 100,2)
Stats_strategy = data.frame(c(as.array(summary(Strat_summary$`Returns in %`,
digits ) 4),batt_avg))
# Results Analysis
batt_avg = round(length(which(Strat_summary$`Returns in %` >= 0))
/length(ind_up) * 100,2)
Stats_strategy = data.frame(c(as.array(summary(Strat_summary$`Returns in %`,
Stats_strategy = data.frame(c(as.array(summary(Strat_summary$`Returns in %`,
digits = 4), batt_avg)))
View(Stats_strategy)
# Results Analysis
batt_avg = round(length(which(Strat_summary$`Returns in %` >= 0))
/length(ind_up) * 100,2)
Stats_strategy = data.frame(c(as.array(summary(Strat_summary$`Returns in %`,
digits = 4), batt_avg)))
colnames(Stats_strategy) <- ""
row.names(Stats_strategy)[7] <- "Batting avg %"
hist(Strat_summary$`Returns in %`, main = Ticker, xlab = "Returns in %")
summary(Strat_summary$`Returns in %`,
digits = 4)
Stats_strategy = data.frame(c(as.array(summary(Strat_summary$`Returns in %`,
digits = 4)), batt_avg))
View(Stats_strategy)
Strat_summary = data.frame(Buy_Date, Sell_Date, Buy_Price,
Sell_Price, Strat_return)
colnames(Strat_summary) <- c("Buy Date", "Sell Date", "Buy Price",
"Sell Price", "Returns in %")
# Results Analysis
batt_avg = round(length(which(Strat_summary$`Returns in %` >= 0))
/length(ind_up) * 100,2)
Stats_strategy = data.frame(c(as.array(summary(Strat_summary$`Returns in %`,
digits = 4)), batt_avg))
colnames(Stats_strategy) <- ""
row.names(Stats_strategy)[7] <- "Batting avg %"
hist(Strat_summary$`Returns in %`, main = Ticker, xlab = "Returns in %")
View(Stats_strategy)
path_data = paste(path_dir, "/data/activos", sep = "")
Files_names = list.files(path_data)
Asset = floor(runif(1, 1, length(Files_names)))
Prices = read.csv(paste(path_data, "/", Files_names[Asset], sep = ""))[,-c(6,7)]
Ticker = strsplit(colnames(Prices)[2], "[.]")[[1]][1]
colnames(Prices) <- c("Date", "Open", "High", "Low", "Close")
p = 20
MA_prices = MA(Prices, p)
# To Store the crossings
Cross_ts <- c()
Cross_ts[1:(p-1)] <- rep(NA, p-1)
# Initialize the first point
Cross_ts[p] = 0
# Fill the other points
for(i in (p+1):nrow(MA_prices)){
if(MA_prices$Close[i - 1] < MA_prices[i - 1, 6] &&
MA_prices$Close[i] > MA_prices[i, 6]){
Cross_ts[i] = 1
}else if(MA_prices$Close[i - 1] > MA_prices[i - 1, 6] &&
MA_prices$Close[i] < MA_prices[i, 6]){
Cross_ts[i] = -1
}else{
Cross_ts[i] = 0
}
}
MA_prices$Crosses <- Cross_ts
# 1) Get the indeces for 1 et -1
ind_up <- which(MA_prices$Crosses == 1)
ind_down <- which(MA_prices$Crosses == -1)
# 2) Define the variables to store the Data
Buy_Date <- c()
Buy_Price <- c()
Sell_Date <- c()
Sell_Price <- c()
Strat_return <- c()
for(i in 1:(min(length(ind_up), length(ind_down)))){
Buy_Date[i] = MA_prices$Date[ind_up[i]]
Buy_Price[i] = MA_prices$Close[ind_up[i]]
Sell_Date[i] = MA_prices$Date[ind_down[i]]
Sell_Price[i] = MA_prices$Close[ind_down[i]]
Strat_return[i] = (Sell_Price[i]/Buy_Price[i] - 1) * 100
}
Strat_summary = data.frame(Buy_Date, Sell_Date, Buy_Price,
Sell_Price, Strat_return)
colnames(Strat_summary) <- c("Buy Date", "Sell Date", "Buy Price",
"Sell Price", "Returns in %")
# Results Analysis
batt_avg = round(length(which(Strat_summary$`Returns in %` >= 0))
/length(ind_up) * 100,2)
Stats_strategy = data.frame(c(as.array(summary(Strat_summary$`Returns in %`,
digits = 4)), batt_avg))
colnames(Stats_strategy) <- ""
row.names(Stats_strategy)[7] <- "Batting avg %"
hist(Strat_summary$`Returns in %`, main = Ticker, xlab = "Returns in %")
View(Stats_strategy)
MA_prices$Date <- as.POSIXct(MA_prices$Date, format = "%Y-%m-%d", tz = "GMT")
data_plot <- irts(MA_prices$Date, value = as.matrix(MA_prices[, 2:6]))
dygraph(data_plot, main = Ticker) %>%
dyOptions(labelsUTC = TRUE, fillGraph = FALSE, colors = c("red", "black")) %>%
dyRangeSelector() %>%
dyCrosshair(direction = "vertical") %>%
dyHighlight(highlightCircleSize = 5, highlightSeriesBackgroundAlpha = 1, hideOnMouseOut = FALSE)  %>%
dyCandlestick() %>%
dyRoller(showRoller = T, rollPeriod = 1)
Strategy_MA <- function(MA_prices, p){
# To Store the crossings Up = 1, Down = -1, Flat = 0
Cross_ts <- c()
Cross_ts[1:(p-1)] <- rep(NA, p-1)
# Initialize the first point
Cross_ts[p] = 0
# Fill the other points
for(i in (p+1):nrow(MA_prices)){
if(MA_prices$Close[i - 1] < MA_prices[i - 1, 6] &&
MA_prices$Close[i] > MA_prices[i, 6]){
Cross_ts[i] = 1
}else if(MA_prices$Close[i - 1] > MA_prices[i - 1, 6] &&
MA_prices$Close[i] < MA_prices[i, 6]){
Cross_ts[i] = -1
}else{
Cross_ts[i] = 0
}
}
MA_prices$Crosses <- Cross_ts
# Calculate the returns at each -1 point
# 1) Get the indices for 1 et -1
ind_up <- which(MA_prices$Crosses == 1)
ind_down <- which(MA_prices$Crosses == -1)
# 2) Define the variables to store the Data
Buy_Date <- c()
Buy_Price <- c()
Sell_Date <- c()
Sell_Price <- c()
Strat_return <- c()
for(i in 1:(min(length(ind_up), length(ind_down)))){
Buy_Date[i] = MA_prices$Date[ind_up[i]]
Buy_Price[i] = MA_prices$Close[ind_up[i]]
Sell_Date[i] = MA_prices$Date[ind_down[i]]
Sell_Price[i] = MA_prices$Close[ind_down[i]]
Strat_return[i] = (Sell_Price[i]/Buy_Price[i] - 1) * 100
}
Strat_summary = data.frame(Buy_Date, Sell_Date, Buy_Price,
Sell_Price, Strat_return)
colnames(Strat_summary) <- c("Buy Date", "Sell Date", "Buy Price",
"Sell Price", "Returns in %")
# Output
list(MA_prices, Strat_summary)
}
Strat_summary = Strategy_MA(MA(Prices, p), p)
Strategy_MA = Strategy_MA(MA(Prices, p), p)
MA_prices = Strategy_MA[["MA_prices"]]
View(Strategy_MA)
MA_prices = Strategy_MA[[MA_prices]]
Strategy_MA <- function(MA_prices, p){
# To Store the crossings Up = 1, Down = -1, Flat = 0
Cross_ts <- c()
Cross_ts[1:(p-1)] <- rep(NA, p-1)
# Initialize the first point
Cross_ts[p] = 0
# Fill the other points
for(i in (p+1):nrow(MA_prices)){
if(MA_prices$Close[i - 1] < MA_prices[i - 1, 6] &&
MA_prices$Close[i] > MA_prices[i, 6]){
Cross_ts[i] = 1
}else if(MA_prices$Close[i - 1] > MA_prices[i - 1, 6] &&
MA_prices$Close[i] < MA_prices[i, 6]){
Cross_ts[i] = -1
}else{
Cross_ts[i] = 0
}
}
MA_prices$Crosses <- Cross_ts
# Calculate the returns at each -1 point
# 1) Get the indices for 1 et -1
ind_up <- which(MA_prices$Crosses == 1)
ind_down <- which(MA_prices$Crosses == -1)
# 2) Define the variables to store the Data
Buy_Date <- c()
Buy_Price <- c()
Sell_Date <- c()
Sell_Price <- c()
Strat_return <- c()
for(i in 1:(min(length(ind_up), length(ind_down)))){
Buy_Date[i] = MA_prices$Date[ind_up[i]]
Buy_Price[i] = MA_prices$Close[ind_up[i]]
Sell_Date[i] = MA_prices$Date[ind_down[i]]
Sell_Price[i] = MA_prices$Close[ind_down[i]]
Strat_return[i] = (Sell_Price[i]/Buy_Price[i] - 1) * 100
}
Strat_summary = data.frame(Buy_Date, Sell_Date, Buy_Price,
Sell_Price, Strat_return)
colnames(Strat_summary) <- c("Buy Date", "Sell Date", "Buy Price",
"Sell Price", "Returns in %")
# Batting average
batt_avg = round(length(which(Strat_summary$`Returns in %` >= 0))
/length(ind_up) * 100,2)
# Output
list(MA_prices, Strat_summary, batt_avg)
}
path_data = paste(path_dir, "/data/activos", sep = "")
Files_names = list.files(path_data)
Asset = floor(runif(1, 1, length(Files_names)))
Prices = read.csv(paste(path_data, "/", Files_names[Asset], sep = ""))[,-c(6,7)]
Ticker = strsplit(colnames(Prices)[2], "[.]")[[1]][1]
colnames(Prices) <- c("Date", "Open", "High", "Low", "Close")
p = 20
path_data = paste(path_dir, "/data/activos", sep = "")
Files_names = list.files(path_data)
Asset = floor(runif(1, 1, length(Files_names)))
Prices = read.csv(paste(path_data, "/", Files_names[Asset], sep = ""))[,-c(6,7)]
Ticker = strsplit(colnames(Prices)[2], "[.]")[[1]][1]
colnames(Prices) <- c("Date", "Open", "High", "Low", "Close")
p = 20
Strategy_Results = Strategy_MA(MA(Prices, p), p)
MA_prices = Strategy_Results[[1]]
Strat_summary = Strategy_Results[[2]]
batt_avg = Strategy_Results[[3]]
View(MA_prices)
View(Strat_summary)
