#Calculate the angle of the shorter P
theta = atan((df_Strat[i, 2] - df_Strat[i - min(p1, p2), 2])/ min(p1, p2))
if(theta < 315){
Cross_ts[i] <- -1
}else{
Cross_ts[i] <- 0
}
}else{
Cross_ts[i] <- 0
}
Cross_ts
plot(df_Strat[,2:4], type = "l")
plot(df_Strat[,2:4])
matplot(df_Strat)
matplot(df_Strat[,1], df_Strat[, 2:4])
matplot(df_Strat[,1], df_Strat[, 2:4], type = 'l')
i
#Calculate the angle of the shorter P
theta = atan((df_Strat[i, 2] - df_Strat[i - min(p1, p2), 2])/ min(p1, p2))
theta
2*pi
pi/4
5*pi/4
pi/4
for(i in (max(p1, p2) + 1):nrow(df_Strat)){
if(df_Strat[i - 1, 3] < df_Strat[i - 1, 4] &
df_Strat[i, 3] > df_Strat[i, 4]){
#Calculate the angle of the shorter P
theta = atan((df_Strat[i, 2] - df_Strat[i - min(p1, p2), 2])/ min(p1, p2))
if(theta > pi/4){
Cross_ts[i] <- 1
}else{
Cross_ts[i] <- 0
}
}else if(df_Strat[i - 1, 3] > df_Strat[i - 1, 4] &
df_Strat[i, 3] < df_Strat[i, 4]){
#Calculate the angle of the shorter P
theta = atan((df_Strat[i, 2] - df_Strat[i - min(p1, p2), 2])/ min(p1, p2))
if(theta < 5*pi/4){
Cross_ts[i] <- -1
}else{
Cross_ts[i] <- 0
}
}else{
Cross_ts[i] <- 0
}
}
df_Strat$Crosses <- Cross_ts
View(df_Strat)
# Calculate the returns at each -1 point (Sell Point)
# 1) Get the indices for 1 and -1
ind_up <- which(df_Strat$Crosses == 1)
p1 = 7
MA1 = MA(Prices, p1)
p2 = 21
MA2 = MA(Prices, p2)
#Rearrange the dataframe
df_Strat <- data.frame(MA1[, c(1, 5, 6)], MA2[, 6])
colnames(df_Strat) <- c('Date', 'Price', paste('MA ', p1), paste("MA ", p2))
# To Store the crossings Up = 1, Down = -1, Flat = 0 of the MA
Cross_ts <- vector(length = nrow(df_Strat))
Cross_ts[1:(max(p1, p2) - 1)] <- rep(NA, max(p1, p2) - 1)
# Initialize the first point
Cross_ts[max(p1, p2)] <- 0
for(i in (max(p1, p2) + 1):nrow(df_Strat)){
if(df_Strat[i - 1, 3] < df_Strat[i - 1, 4] &
df_Strat[i, 3] > df_Strat[i, 4]){
#Calculate the angle of the shorter P
theta = atan((df_Strat[i, 2] - df_Strat[i - min(p1, p2), 2])/ min(p1, p2))
if(theta > pi/4){
Cross_ts[i] <- 1
}else{
Cross_ts[i] <- 0
}
}else if(df_Strat[i - 1, 3] > df_Strat[i - 1, 4] &
df_Strat[i, 3] < df_Strat[i, 4]){
#Calculate the angle of the shorter P
theta = atan((df_Strat[i, 2] - df_Strat[i - min(p1, p2), 2])/ min(p1, p2))
if(theta < 5*pi/4){
Cross_ts[i] <- -1
}else{
Cross_ts[i] <- 0
}
}else{
Cross_ts[i] <- 0
}
}
df_Strat$Crosses <- Cross_ts
# Calculate the returns at each -1 point (Sell Point)
# 1) Get the indices for 1 and -1
ind_up <- which(df_Strat$Crosses == 1)
ind_down <- which(df_Strat$Crosses == -1)
## Buy Strategy
iter <- min(length(ind_up), length(ind_down))
Buy_Date <- vector(length = iter)
Buy_Price <- vector(length = iter)
Close_Date <- vector(length = iter)
Close_Price <- vector(length = iter)
Strat_return_Buy <- vector(length = iter)
for(i in 1:iter){
Buy_Date[i] <- format(df_Strat$Date[ind_up[i]], "%Y-%m-%d")
Buy_Price[i] <- df_Strat$Close[ind_up[i]]
Close_Date[i] <- format(df_Strat$Date[ind_down[i]], "%Y-%m-%d")
Close_Price[i] <- df_Strat$Close[ind_down[i]]
Strat_return_Buy[i] <- (Close_Price[i]/Buy_Price[i] - 1) * 100
}
matplot(df_Strat[1:1000,1], df_Strat[1:1000, 2:4], type = 'l')
matplot(df_Strat[1:500,1], df_Strat[1:500, 2:4], type = 'l')
View(df_Strat)
View(MA1)
df_Strat[1:(p1-1), 3] <- NA
df_Strat[1:(p2-1), 4] <- NA
View(df_Strat)
#Rearrange the dataframe
df_Strat <- data.frame(MA1[, c(1, 5, 6)], MA2[, 6])
colnames(df_Strat) <- c('Date', 'Price', paste('MA ', p1), paste("MA ", p2))
df_Strat[1:(p1-1), 3] <- NA
df_Strat[1:(p2-1), 4] <- NA
# To Store the crossings Up = 1, Down = -1, Flat = 0 of the MA
Cross_ts <- vector(length = nrow(df_Strat))
Cross_ts[1:(max(p1, p2) - 1)] <- rep(NA, max(p1, p2) - 1)
# Initialize the first point
Cross_ts[max(p1, p2)] <- 0
for(i in (max(p1, p2) + 1):nrow(df_Strat)){
if(df_Strat[i - 1, 3] < df_Strat[i - 1, 4] &
df_Strat[i, 3] > df_Strat[i, 4]){
#Calculate the angle of the shorter P
theta = atan((df_Strat[i, 2] - df_Strat[i - min(p1, p2), 2])/ min(p1, p2))
if(theta > pi/4){
Cross_ts[i] <- 1
}else{
Cross_ts[i] <- 0
}
}else if(df_Strat[i - 1, 3] > df_Strat[i - 1, 4] &
df_Strat[i, 3] < df_Strat[i, 4]){
#Calculate the angle of the shorter P
theta = atan((df_Strat[i, 2] - df_Strat[i - min(p1, p2), 2])/ min(p1, p2))
if(theta < 5*pi/4){
Cross_ts[i] <- -1
}else{
Cross_ts[i] <- 0
}
}else{
Cross_ts[i] <- 0
}
}
df_Strat$Crosses <- Cross_ts
# Calculate the returns at each -1 point (Sell Point)
# 1) Get the indices for 1 and -1
ind_up <- which(df_Strat$Crosses == 1)
ind_down <- which(df_Strat$Crosses == -1)
theta
matplot(df_Strat[1:100,1], df_Strat[1:100, 2:4], type = 'l')
i
Cross_ts[i]
theta < pi/4 & theta < 2*pi
theta
theta < pi/4 & theta > -pi/4
pi/4
theta > -pi/4
matplot(df_Strat[1:200,1], df_Strat[1:200, 2:4], type = 'l')
for(i in (max(p1, p2) + 1):nrow(df_Strat)){
if(df_Strat[i - 1, 3] < df_Strat[i - 1, 4] &
df_Strat[i, 3] > df_Strat[i, 4]){
#Calculate the angle of the shorter P
theta = atan((df_Strat[i, 2] - df_Strat[i - min(p1, p2), 2])/ min(p1, p2))
if(theta < pi/4 & theta > -pi/4){
Cross_ts[i] <- 1
}else{
Cross_ts[i] <- 0
}
}else if(df_Strat[i - 1, 3] > df_Strat[i - 1, 4] &
df_Strat[i, 3] < df_Strat[i, 4]){
#Calculate the angle of the shorter P
theta = atan((df_Strat[i, 2] - df_Strat[i - min(p1, p2), 2])/ min(p1, p2))
if(theta < 0){
Cross_ts[i] <- -1
}else{
Cross_ts[i] <- 0
}
}else{
Cross_ts[i] <- 0
}
}
df_Strat$Crosses <- Cross_ts
# Calculate the returns at each -1 point (Sell Point)
# 1) Get the indices for 1 and -1
ind_up <- which(df_Strat$Crosses == 1)
ind_down <- which(df_Strat$Crosses == -1)
## Buy Strategy
iter <- min(length(ind_up), length(ind_down))
Buy_Date <- vector(length = iter)
Buy_Price <- vector(length = iter)
Close_Date <- vector(length = iter)
Close_Price <- vector(length = iter)
Strat_return_Buy <- vector(length = iter)
for(i in 1:iter){
Buy_Date[i] <- format(df_Strat$Date[ind_up[i]], "%Y-%m-%d")
Buy_Price[i] <- df_Strat$Close[ind_up[i]]
Close_Date[i] <- format(df_Strat$Date[ind_down[i]], "%Y-%m-%d")
Close_Price[i] <- df_Strat$Close[ind_down[i]]
Strat_return_Buy[i] <- (Close_Price[i]/Buy_Price[i] - 1) * 100
}
View(df_Strat)
# Calculate the returns at each -1 point (Sell Point)
# 1) Get the indices for 1 and -1
ind_up <- which(df_Strat$Crosses == 1)
ind_down <- which(df_Strat$Crosses == -1)
## Buy Strategy
iter <- min(length(ind_up), length(ind_down))
Buy_Date <- vector(length = iter)
Buy_Price <- vector(length = iter)
Close_Date <- vector(length = iter)
Close_Price <- vector(length = iter)
Strat_return_Buy <- vector(length = iter)
#Rearrange the dataframe
df_Strat <- data.frame(MA1[, c(1, 5, 6)], MA2[, 6])
colnames(df_Strat) <- c('Date', 'Close', paste('MA ', p1), paste("MA ", p2))
df_Strat[1:(p1-1), 3] <- NA
df_Strat[1:(p2-1), 4] <- NA
# To Store the crossings Up = 1, Down = -1, Flat = 0 of the MA
Cross_ts <- vector(length = nrow(df_Strat))
Cross_ts[1:(max(p1, p2) - 1)] <- rep(NA, max(p1, p2) - 1)
# Initialize the first point
Cross_ts[max(p1, p2)] <- 0
for(i in (max(p1, p2) + 1):nrow(df_Strat)){
if(df_Strat[i - 1, 3] < df_Strat[i - 1, 4] &
df_Strat[i, 3] > df_Strat[i, 4]){
#Calculate the angle of the shorter P
theta = atan((df_Strat[i, 2] - df_Strat[i - min(p1, p2), 2])/ min(p1, p2))
if(theta < pi/4 & theta > -pi/4){
Cross_ts[i] <- 1
}else{
Cross_ts[i] <- 0
}
}else if(df_Strat[i - 1, 3] > df_Strat[i - 1, 4] &
df_Strat[i, 3] < df_Strat[i, 4]){
#Calculate the angle of the shorter P
theta = atan((df_Strat[i, 2] - df_Strat[i - min(p1, p2), 2])/ min(p1, p2))
if(theta < 0){
Cross_ts[i] <- -1
}else{
Cross_ts[i] <- 0
}
}else{
Cross_ts[i] <- 0
}
}
df_Strat$Crosses <- Cross_ts
# Calculate the returns at each -1 point (Sell Point)
# 1) Get the indices for 1 and -1
ind_up <- which(df_Strat$Crosses == 1)
ind_down <- which(df_Strat$Crosses == -1)
## Buy Strategy
iter <- min(length(ind_up), length(ind_down))
Buy_Date <- vector(length = iter)
Buy_Price <- vector(length = iter)
Close_Date <- vector(length = iter)
Close_Price <- vector(length = iter)
Strat_return_Buy <- vector(length = iter)
for(i in 1:iter){
Buy_Date[i] <- format(df_Strat$Date[ind_up[i]], "%Y-%m-%d")
Buy_Price[i] <- df_Strat$Close[ind_up[i]]
Close_Date[i] <- format(df_Strat$Date[ind_down[i]], "%Y-%m-%d")
Close_Price[i] <- df_Strat$Close[ind_down[i]]
Strat_return_Buy[i] <- (Close_Price[i]/Buy_Price[i] - 1) * 100
}
Strat_summary_Buy <- data.frame(Buy_Date, Close_Date, Buy_Price,
Close_Price, Strat_return_Buy)
colnames(Strat_summary_Buy) <- c("Buy Date", "Closing Date", "Buy Price",
"Closing Price", "Ret % (Buy)")
View(Strat_summary_Buy)
## Sell Strategy
iter <- min(length(ind_up), length(ind_down))
Close_Date <- vector(length = iter)
Close_Price <- vector(length = iter)
Sell_Date <- vector(length = iter)
Sell_Price <- vector(length = iter)
Strat_return_Sell <- vector(length = iter)
for(i in 1:iter){
Sell_Date[i] <- format(df_Strat$Date[ind_down[i]], "%Y-%m-%d")
Sell_Price[i] <- df_Strat$Close[ind_down[i]]
Close_Date[i] <- format(df_Strat$Date[ind_up[i+1]], "%Y-%m-%d")
Close_Price[i] <- df_Strat$Close[ind_up[i+1]]
Strat_return_Sell[i] <- (Close_Price[i]/Sell_Price[i] - 1) * 100 * -1
}
Strat_summary_Sell <- data.frame(Sell_Date, Close_Date, Sell_Price,
Close_Price, Strat_return_Sell)
colnames(Strat_summary_Sell) <- c("Sell Date", "Closing Date", "Sell Price",
"Closing Price", "Ret % (Sell)")
View(Strat_summary_Sell)
# Batting average
batt_avg_Buy <- round(length(which(Strat_summary_Buy$`Ret % (Buy)` >= 0))
/length(ind_up) * 100, 2)
batt_avg_Sell <- round(length(which(Strat_summary_Sell$`Ret % (Sell)` >= 0))
/length(ind_down) * 100, 2)
for(i in (max(p1, p2) + 1):nrow(df_Strat)){
if(df_Strat[i - 1, 3] < df_Strat[i - 1, 4] &
df_Strat[i, 3] > df_Strat[i, 4]){
#Calculate the angle of the shorter P
theta = atan((df_Strat[i, 2] - df_Strat[i - min(p1, p2), 2])/ min(p1, p2))
if(theta < pi/4 & theta > -pi/4){
Cross_ts[i] <- 1
}else{
Cross_ts[i] <- 0
}
}else if(df_Strat[i - 1, 3] > df_Strat[i - 1, 4] &
df_Strat[i, 3] < df_Strat[i, 4]){
#Calculate the angle of the shorter P
theta = atan((df_Strat[i, 2] - df_Strat[i - min(p1, p2), 2])/ min(p1, p2))
if(theta < -pi/4){
Cross_ts[i] <- -1
}else{
Cross_ts[i] <- 0
}
}else{
Cross_ts[i] <- 0
}
}
df_Strat$Crosses <- Cross_ts
# Calculate the returns at each -1 point (Sell Point)
# 1) Get the indices for 1 and -1
ind_up <- which(df_Strat$Crosses == 1)
ind_down <- which(df_Strat$Crosses == -1)
for(i in (max(p1, p2) + 1):nrow(df_Strat)){
if(df_Strat[i - 1, 3] < df_Strat[i - 1, 4] &
df_Strat[i, 3] > df_Strat[i, 4]){
#Calculate the angle of the shorter P
theta = atan((df_Strat[i, 2] - df_Strat[i - min(p1, p2), 2])/ min(p1, p2))
if(theta < pi/4 & theta > -pi/4){
Cross_ts[i] <- 1
}else{
Cross_ts[i] <- 0
}
}else if(df_Strat[i - 1, 3] > df_Strat[i - 1, 4] &
df_Strat[i, 3] < df_Strat[i, 4]){
#Calculate the angle of the shorter P
theta = atan((df_Strat[i, 2] - df_Strat[i - min(p1, p2), 2])/ min(p1, p2))
if(theta < 0){
Cross_ts[i] <- -1
}else{
Cross_ts[i] <- 0
}
}else{
Cross_ts[i] <- 0
}
}
df_Strat$Crosses <- Cross_ts
# Calculate the returns at each -1 point (Sell Point)
# 1) Get the indices for 1 and -1
ind_up <- which(df_Strat$Crosses == 1)
ind_down <- which(df_Strat$Crosses == -1)
## Buy Strategy
iter <- min(length(ind_up), length(ind_down))
Buy_Date <- vector(length = iter)
Buy_Price <- vector(length = iter)
Close_Date <- vector(length = iter)
Close_Price <- vector(length = iter)
Strat_return_Buy <- vector(length = iter)
for(i in 1:iter){
Buy_Date[i] <- format(df_Strat$Date[ind_up[i]], "%Y-%m-%d")
Buy_Price[i] <- df_Strat$Close[ind_up[i]]
Close_Date[i] <- format(df_Strat$Date[ind_down[i]], "%Y-%m-%d")
Close_Price[i] <- df_Strat$Close[ind_down[i]]
Strat_return_Buy[i] <- (Close_Price[i]/Buy_Price[i] - 1) * 100
}
Strat_summary_Buy <- data.frame(Buy_Date, Close_Date, Buy_Price,
Close_Price, Strat_return_Buy)
colnames(Strat_summary_Buy) <- c("Buy Date", "Closing Date", "Buy Price",
"Closing Price", "Ret % (Buy)")
## Sell Strategy
iter <- min(length(ind_up), length(ind_down))
Close_Date <- vector(length = iter)
Close_Price <- vector(length = iter)
Sell_Date <- vector(length = iter)
Sell_Price <- vector(length = iter)
Strat_return_Sell <- vector(length = iter)
for(i in 1:iter){
Sell_Date[i] <- format(df_Strat$Date[ind_down[i]], "%Y-%m-%d")
Sell_Price[i] <- df_Strat$Close[ind_down[i]]
Close_Date[i] <- format(df_Strat$Date[ind_up[i+1]], "%Y-%m-%d")
Close_Price[i] <- df_Strat$Close[ind_up[i+1]]
Strat_return_Sell[i] <- (Close_Price[i]/Sell_Price[i] - 1) * 100 * -1
}
Strat_summary_Sell <- data.frame(Sell_Date, Close_Date, Sell_Price,
Close_Price, Strat_return_Sell)
colnames(Strat_summary_Sell) <- c("Sell Date", "Closing Date", "Sell Price",
"Closing Price", "Ret % (Sell)")
# Batting average
batt_avg_Buy <- round(length(which(Strat_summary_Buy$`Ret % (Buy)` >= 0))
/length(ind_up) * 100, 2)
batt_avg_Sell <- round(length(which(Strat_summary_Sell$`Ret % (Sell)` >= 0))
/length(ind_down) * 100, 2)
## Select the periods for the MA Strategy
p1 <- 7
p2 <- 21
cont <- 1
i = files_names[1]
#system.time(
#for (i in files_names){
Prices <- read_csv(file = i, col_types = list("D", "d", "d", "d", "d", "d", "d"))[-c(6, 7)]
Ticker <- gsub(pattern = "\\.Open", replacement = "", colnames(Prices)[2])
colnames(Prices) <- c("Date", "Open", "High", "Low", "Close")
result$ticker[cont] <- Ticker
result$batt_avg_Buy[cont] <- Strategy_MMA(MA(Prices, p1), p1, MA(Prices, p2), p2)[[4]]
result$batt_avg_Sell[cont] <- Strategy_MMA(MA(Prices, p1), p1, MA(Prices, p2), p2)[[5]]
files_source <- list.files(path = "Strategies/MA_Funciones/", full.names = TRUE)
files_source <- files_source[!grepl("main", files_source)]
sapply(files_source, source, .GlobalEnv)
files_names <- list.files(path = "data/activos/", full.names = TRUE)
result <- data.frame(
ticker = vector(length = length(files_names)),
batt_avg_Buy = vector(length = length(files_names)),
batt_avg_Sell = vector(length = length(files_names))
)
## Select the periods for the MA Strategy
p1 <- 7
p2 <- 21
cont <- 1
i = files_names[1]
#system.time(
#for (i in files_names){
Prices <- read_csv(file = i, col_types = list("D", "d", "d", "d", "d", "d", "d"))[-c(6, 7)]
Ticker <- gsub(pattern = "\\.Open", replacement = "", colnames(Prices)[2])
colnames(Prices) <- c("Date", "Open", "High", "Low", "Close")
result$ticker[cont] <- Ticker
result$batt_avg_Buy[cont] <- Strategy_MMA(MA(Prices, p1), p1, MA(Prices, p2), p2)[[4]]
files_source <- list.files(path = "Strategies/MA_Funciones/", full.names = TRUE)
files_source <- files_source[!grepl("main", files_source)]
sapply(files_source, source, .GlobalEnv)
files_names <- list.files(path = "data/activos/", full.names = TRUE)
result <- data.frame(
ticker = vector(length = length(files_names)),
batt_avg_Buy = vector(length = length(files_names)),
batt_avg_Sell = vector(length = length(files_names))
)
files_source <- list.files(path = "Strategies/MMA_Strategy/", full.names = TRUE)
files_source <- files_source[!grepl("main", files_source)]
sapply(files_source, source, .GlobalEnv)
files_names <- list.files(path = "data/activos/", full.names = TRUE)
result <- data.frame(
ticker = vector(length = length(files_names)),
batt_avg_Buy = vector(length = length(files_names)),
batt_avg_Sell = vector(length = length(files_names))
)
## Select the periods for the MA Strategy
p1 <- 7
p2 <- 21
cont <- 1
i = files_names[1]
#system.time(
#for (i in files_names){
Prices <- read_csv(file = i, col_types = list("D", "d", "d", "d", "d", "d", "d"))[-c(6, 7)]
Ticker <- gsub(pattern = "\\.Open", replacement = "", colnames(Prices)[2])
colnames(Prices) <- c("Date", "Open", "High", "Low", "Close")
result$ticker[cont] <- Ticker
result$batt_avg_Buy[cont] <- Strategy_MMA(MA(Prices, p1), p1, MA(Prices, p2), p2)[[4]]
result$batt_avg_Sell[cont] <- Strategy_MMA(MA(Prices, p1), p1, MA(Prices, p2), p2)[[5]]
cont <- cont + 1
ggplot(data = result, aes(ticker, batt_avg_Buy)) +
geom_point(shape = 21, col = "navy", fill = "royalblue") +
geom_hline(yintercept = 50, lwd = 0.8, lty = 2,  col = "salmon")
files_source <- list.files(path = "Strategies/MMA_Strategy/", full.names = TRUE)
files_source <- files_source[!grepl("main", files_source)]
sapply(files_source, source, .GlobalEnv)
files_names <- list.files(path = "data/activos/", full.names = TRUE)
result <- data.frame(
ticker = vector(length = length(files_names)),
batt_avg_Buy = vector(length = length(files_names)),
batt_avg_Sell = vector(length = length(files_names))
)
## Select the periods for the MA Strategy
p1 <- 7
p2 <- 21
cont <- 1
system.time(
for (i in files_names){
Prices <- read_csv(file = i, col_types = list("D", "d", "d", "d", "d", "d", "d"))[-c(6, 7)]
Ticker <- gsub(pattern = "\\.Open", replacement = "", colnames(Prices)[2])
colnames(Prices) <- c("Date", "Open", "High", "Low", "Close")
result$ticker[cont] <- Ticker
result$batt_avg_Buy[cont] <- Strategy_MMA(MA(Prices, p1), p1, MA(Prices, p2), p2)[[4]]
result$batt_avg_Sell[cont] <- Strategy_MMA(MA(Prices, p1), p1, MA(Prices, p2), p2)[[5]]
cont <- cont + 1
}
)
ggplot(data = result, aes(ticker, batt_avg_Buy)) +
geom_point(shape = 21, col = "navy", fill = "royalblue") +
geom_hline(yintercept = 50, lwd = 0.8, lty = 2,  col = "salmon")
result$batt_avg_Buy
count(result$batt_avg_Buy > 50)
count(result[result$batt_avg_Buy > 50])
nrow(result[result$batt_avg_Buy > 50])
ncol(result[result$batt_avg_Buy > 50])
result$batt_avg_Buy
result$batt_avg_Buy > 50
result[result$batt_avg_Buy > 50]
[result$batt_avg_Buy > 50] == TRUE
result$batt_avg_Buy > 50 == TRUE
result$batt_avg_Buy > 50
nrow(result[result$batt_avg_Buy > 50, ])
nrow(result[result$batt_avg_Buy, ]
)
ggplot(data = result, aes(ticker, batt_avg_Sell)) +
geom_point(shape = 21, col = "green4", fill = "green3") +
geom_hline(yintercept = 50, lwd = 0.8, lty = 2,  col = "salmon")
ggplot(data = result, aes(ticker, batt_avg_Buy)) +
geom_point(shape = 21, col = "navy", fill = "royalblue") +
geom_hline(yintercept = 50, lwd = 0.8, lty = 2,  col = "salmon")
ggplot(data = result, aes(ticker, batt_avg_Sell)) +
geom_point(shape = 21, col = "green4", fill = "green3") +
geom_hline(yintercept = 50, lwd = 0.8, lty = 2,  col = "salmon")
